#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CGPAWeb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CGPADatabase")]
	public partial class MyCGPALinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insert_100LResultTable(_100LResultTable instance);
    partial void Update_100LResultTable(_100LResultTable instance);
    partial void Delete_100LResultTable(_100LResultTable instance);
    partial void InsertCourseTable(CourseTable instance);
    partial void UpdateCourseTable(CourseTable instance);
    partial void DeleteCourseTable(CourseTable instance);
    partial void InsertDepartmentTable(DepartmentTable instance);
    partial void UpdateDepartmentTable(DepartmentTable instance);
    partial void DeleteDepartmentTable(DepartmentTable instance);
    partial void InsertLevelTable(LevelTable instance);
    partial void UpdateLevelTable(LevelTable instance);
    partial void DeleteLevelTable(LevelTable instance);
    partial void InsertSemesterTable(SemesterTable instance);
    partial void UpdateSemesterTable(SemesterTable instance);
    partial void DeleteSemesterTable(SemesterTable instance);
    partial void InsertStudentDetail(StudentDetail instance);
    partial void UpdateStudentDetail(StudentDetail instance);
    partial void DeleteStudentDetail(StudentDetail instance);
    #endregion
		
		public MyCGPALinqDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CGPADatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyCGPALinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyCGPALinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyCGPALinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyCGPALinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<_100LResultTable> _100LResultTables
		{
			get
			{
				return this.GetTable<_100LResultTable>();
			}
		}
		
		public System.Data.Linq.Table<CourseTable> CourseTables
		{
			get
			{
				return this.GetTable<CourseTable>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentTable> DepartmentTables
		{
			get
			{
				return this.GetTable<DepartmentTable>();
			}
		}
		
		public System.Data.Linq.Table<LevelTable> LevelTables
		{
			get
			{
				return this.GetTable<LevelTable>();
			}
		}
		
		public System.Data.Linq.Table<SemesterTable> SemesterTables
		{
			get
			{
				return this.GetTable<SemesterTable>();
			}
		}
		
		public System.Data.Linq.Table<StudentDetail> StudentDetails
		{
			get
			{
				return this.GetTable<StudentDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[100LResultTable]")]
	public partial class _100LResultTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _FirstSemesterTPU;
		
		private System.Nullable<int> _SecondSemesterTPU;
		
		private System.Nullable<int> _FirstSemesterTCU;
		
		private System.Nullable<int> _SecondSemesterTCU;
		
		private string _FirstSemesterGPA;
		
		private string _SecondSemesterGPA;
		
		private string _CGPA;
		
		private string _Remark;
		
		private EntityRef<StudentDetail> _StudentDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnFirstSemesterTPUChanging(System.Nullable<int> value);
    partial void OnFirstSemesterTPUChanged();
    partial void OnSecondSemesterTPUChanging(System.Nullable<int> value);
    partial void OnSecondSemesterTPUChanged();
    partial void OnFirstSemesterTCUChanging(System.Nullable<int> value);
    partial void OnFirstSemesterTCUChanged();
    partial void OnSecondSemesterTCUChanging(System.Nullable<int> value);
    partial void OnSecondSemesterTCUChanged();
    partial void OnFirstSemesterGPAChanging(string value);
    partial void OnFirstSemesterGPAChanged();
    partial void OnSecondSemesterGPAChanging(string value);
    partial void OnSecondSemesterGPAChanged();
    partial void OnCGPAChanging(string value);
    partial void OnCGPAChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public _100LResultTable()
		{
			this._StudentDetail = default(EntityRef<StudentDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._StudentDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstSemesterTPU", DbType="Int")]
		public System.Nullable<int> FirstSemesterTPU
		{
			get
			{
				return this._FirstSemesterTPU;
			}
			set
			{
				if ((this._FirstSemesterTPU != value))
				{
					this.OnFirstSemesterTPUChanging(value);
					this.SendPropertyChanging();
					this._FirstSemesterTPU = value;
					this.SendPropertyChanged("FirstSemesterTPU");
					this.OnFirstSemesterTPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondSemesterTPU", DbType="Int")]
		public System.Nullable<int> SecondSemesterTPU
		{
			get
			{
				return this._SecondSemesterTPU;
			}
			set
			{
				if ((this._SecondSemesterTPU != value))
				{
					this.OnSecondSemesterTPUChanging(value);
					this.SendPropertyChanging();
					this._SecondSemesterTPU = value;
					this.SendPropertyChanged("SecondSemesterTPU");
					this.OnSecondSemesterTPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstSemesterTCU", DbType="Int")]
		public System.Nullable<int> FirstSemesterTCU
		{
			get
			{
				return this._FirstSemesterTCU;
			}
			set
			{
				if ((this._FirstSemesterTCU != value))
				{
					this.OnFirstSemesterTCUChanging(value);
					this.SendPropertyChanging();
					this._FirstSemesterTCU = value;
					this.SendPropertyChanged("FirstSemesterTCU");
					this.OnFirstSemesterTCUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondSemesterTCU", DbType="Int")]
		public System.Nullable<int> SecondSemesterTCU
		{
			get
			{
				return this._SecondSemesterTCU;
			}
			set
			{
				if ((this._SecondSemesterTCU != value))
				{
					this.OnSecondSemesterTCUChanging(value);
					this.SendPropertyChanging();
					this._SecondSemesterTCU = value;
					this.SendPropertyChanged("SecondSemesterTCU");
					this.OnSecondSemesterTCUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstSemesterGPA", DbType="NVarChar(50)")]
		public string FirstSemesterGPA
		{
			get
			{
				return this._FirstSemesterGPA;
			}
			set
			{
				if ((this._FirstSemesterGPA != value))
				{
					this.OnFirstSemesterGPAChanging(value);
					this.SendPropertyChanging();
					this._FirstSemesterGPA = value;
					this.SendPropertyChanged("FirstSemesterGPA");
					this.OnFirstSemesterGPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondSemesterGPA", DbType="NVarChar(50)")]
		public string SecondSemesterGPA
		{
			get
			{
				return this._SecondSemesterGPA;
			}
			set
			{
				if ((this._SecondSemesterGPA != value))
				{
					this.OnSecondSemesterGPAChanging(value);
					this.SendPropertyChanging();
					this._SecondSemesterGPA = value;
					this.SendPropertyChanged("SecondSemesterGPA");
					this.OnSecondSemesterGPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CGPA", DbType="NVarChar(50)")]
		public string CGPA
		{
			get
			{
				return this._CGPA;
			}
			set
			{
				if ((this._CGPA != value))
				{
					this.OnCGPAChanging(value);
					this.SendPropertyChanging();
					this._CGPA = value;
					this.SendPropertyChanged("CGPA");
					this.OnCGPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="NVarChar(50)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentDetail__100LResultTable", Storage="_StudentDetail", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true, DeleteRule="CASCADE")]
		public StudentDetail StudentDetail
		{
			get
			{
				return this._StudentDetail.Entity;
			}
			set
			{
				StudentDetail previousValue = this._StudentDetail.Entity;
				if (((previousValue != value) 
							|| (this._StudentDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentDetail.Entity = null;
						previousValue._100LResultTables.Remove(this);
					}
					this._StudentDetail.Entity = value;
					if ((value != null))
					{
						value._100LResultTables.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("StudentDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseTable")]
	public partial class CourseTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CourseId;
		
		private string _CourseTitle;
		
		private System.Nullable<int> _CourseUnit;
		
		private System.Nullable<int> _DeptId;
		
		private System.Nullable<int> _LevelId;
		
		private System.Nullable<int> _SemesterId;
		
		private EntityRef<DepartmentTable> _DepartmentTable;
		
		private EntityRef<LevelTable> _LevelTable;
		
		private EntityRef<SemesterTable> _SemesterTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(string value);
    partial void OnCourseIdChanged();
    partial void OnCourseTitleChanging(string value);
    partial void OnCourseTitleChanged();
    partial void OnCourseUnitChanging(System.Nullable<int> value);
    partial void OnCourseUnitChanged();
    partial void OnDeptIdChanging(System.Nullable<int> value);
    partial void OnDeptIdChanged();
    partial void OnLevelIdChanging(System.Nullable<int> value);
    partial void OnLevelIdChanged();
    partial void OnSemesterIdChanging(System.Nullable<int> value);
    partial void OnSemesterIdChanged();
    #endregion
		
		public CourseTable()
		{
			this._DepartmentTable = default(EntityRef<DepartmentTable>);
			this._LevelTable = default(EntityRef<LevelTable>);
			this._SemesterTable = default(EntityRef<SemesterTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTitle", DbType="NVarChar(50)")]
		public string CourseTitle
		{
			get
			{
				return this._CourseTitle;
			}
			set
			{
				if ((this._CourseTitle != value))
				{
					this.OnCourseTitleChanging(value);
					this.SendPropertyChanging();
					this._CourseTitle = value;
					this.SendPropertyChanged("CourseTitle");
					this.OnCourseTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseUnit", DbType="Int")]
		public System.Nullable<int> CourseUnit
		{
			get
			{
				return this._CourseUnit;
			}
			set
			{
				if ((this._CourseUnit != value))
				{
					this.OnCourseUnitChanging(value);
					this.SendPropertyChanging();
					this._CourseUnit = value;
					this.SendPropertyChanged("CourseUnit");
					this.OnCourseUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptId", DbType="Int")]
		public System.Nullable<int> DeptId
		{
			get
			{
				return this._DeptId;
			}
			set
			{
				if ((this._DeptId != value))
				{
					if (this._DepartmentTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeptIdChanging(value);
					this.SendPropertyChanging();
					this._DeptId = value;
					this.SendPropertyChanged("DeptId");
					this.OnDeptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelId", DbType="Int")]
		public System.Nullable<int> LevelId
		{
			get
			{
				return this._LevelId;
			}
			set
			{
				if ((this._LevelId != value))
				{
					if (this._LevelTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIdChanging(value);
					this.SendPropertyChanging();
					this._LevelId = value;
					this.SendPropertyChanged("LevelId");
					this.OnLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterId", DbType="Int")]
		public System.Nullable<int> SemesterId
		{
			get
			{
				return this._SemesterId;
			}
			set
			{
				if ((this._SemesterId != value))
				{
					if (this._SemesterTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterIdChanging(value);
					this.SendPropertyChanging();
					this._SemesterId = value;
					this.SendPropertyChanged("SemesterId");
					this.OnSemesterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentTable_CourseTable", Storage="_DepartmentTable", ThisKey="DeptId", OtherKey="DeptId", IsForeignKey=true, DeleteRule="CASCADE")]
		public DepartmentTable DepartmentTable
		{
			get
			{
				return this._DepartmentTable.Entity;
			}
			set
			{
				DepartmentTable previousValue = this._DepartmentTable.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentTable.Entity = null;
						previousValue.CourseTables.Remove(this);
					}
					this._DepartmentTable.Entity = value;
					if ((value != null))
					{
						value.CourseTables.Add(this);
						this._DeptId = value.DeptId;
					}
					else
					{
						this._DeptId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DepartmentTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelTable_CourseTable", Storage="_LevelTable", ThisKey="LevelId", OtherKey="LevelId", IsForeignKey=true, DeleteRule="CASCADE")]
		public LevelTable LevelTable
		{
			get
			{
				return this._LevelTable.Entity;
			}
			set
			{
				LevelTable previousValue = this._LevelTable.Entity;
				if (((previousValue != value) 
							|| (this._LevelTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelTable.Entity = null;
						previousValue.CourseTables.Remove(this);
					}
					this._LevelTable.Entity = value;
					if ((value != null))
					{
						value.CourseTables.Add(this);
						this._LevelId = value.LevelId;
					}
					else
					{
						this._LevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterTable_CourseTable", Storage="_SemesterTable", ThisKey="SemesterId", OtherKey="SemesterId", IsForeignKey=true, DeleteRule="CASCADE")]
		public SemesterTable SemesterTable
		{
			get
			{
				return this._SemesterTable.Entity;
			}
			set
			{
				SemesterTable previousValue = this._SemesterTable.Entity;
				if (((previousValue != value) 
							|| (this._SemesterTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SemesterTable.Entity = null;
						previousValue.CourseTables.Remove(this);
					}
					this._SemesterTable.Entity = value;
					if ((value != null))
					{
						value.CourseTables.Add(this);
						this._SemesterId = value.SemesterId;
					}
					else
					{
						this._SemesterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SemesterTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepartmentTable")]
	public partial class DepartmentTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeptId;
		
		private string _DeptName;
		
		private EntitySet<CourseTable> _CourseTables;
		
		private EntitySet<StudentDetail> _StudentDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeptIdChanging(int value);
    partial void OnDeptIdChanged();
    partial void OnDeptNameChanging(string value);
    partial void OnDeptNameChanged();
    #endregion
		
		public DepartmentTable()
		{
			this._CourseTables = new EntitySet<CourseTable>(new Action<CourseTable>(this.attach_CourseTables), new Action<CourseTable>(this.detach_CourseTables));
			this._StudentDetails = new EntitySet<StudentDetail>(new Action<StudentDetail>(this.attach_StudentDetails), new Action<StudentDetail>(this.detach_StudentDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeptId
		{
			get
			{
				return this._DeptId;
			}
			set
			{
				if ((this._DeptId != value))
				{
					this.OnDeptIdChanging(value);
					this.SendPropertyChanging();
					this._DeptId = value;
					this.SendPropertyChanged("DeptId");
					this.OnDeptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptName", DbType="NVarChar(50)")]
		public string DeptName
		{
			get
			{
				return this._DeptName;
			}
			set
			{
				if ((this._DeptName != value))
				{
					this.OnDeptNameChanging(value);
					this.SendPropertyChanging();
					this._DeptName = value;
					this.SendPropertyChanged("DeptName");
					this.OnDeptNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentTable_CourseTable", Storage="_CourseTables", ThisKey="DeptId", OtherKey="DeptId")]
		public EntitySet<CourseTable> CourseTables
		{
			get
			{
				return this._CourseTables;
			}
			set
			{
				this._CourseTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentTable_StudentDetail", Storage="_StudentDetails", ThisKey="DeptId", OtherKey="DeptId")]
		public EntitySet<StudentDetail> StudentDetails
		{
			get
			{
				return this._StudentDetails;
			}
			set
			{
				this._StudentDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseTables(CourseTable entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentTable = this;
		}
		
		private void detach_CourseTables(CourseTable entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentTable = null;
		}
		
		private void attach_StudentDetails(StudentDetail entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentTable = this;
		}
		
		private void detach_StudentDetails(StudentDetail entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LevelTable")]
	public partial class LevelTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LevelId;
		
		private System.Nullable<int> _LevelName;
		
		private EntitySet<CourseTable> _CourseTables;
		
		private EntitySet<StudentDetail> _StudentDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelIdChanging(int value);
    partial void OnLevelIdChanged();
    partial void OnLevelNameChanging(System.Nullable<int> value);
    partial void OnLevelNameChanged();
    #endregion
		
		public LevelTable()
		{
			this._CourseTables = new EntitySet<CourseTable>(new Action<CourseTable>(this.attach_CourseTables), new Action<CourseTable>(this.detach_CourseTables));
			this._StudentDetails = new EntitySet<StudentDetail>(new Action<StudentDetail>(this.attach_StudentDetails), new Action<StudentDetail>(this.detach_StudentDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LevelId
		{
			get
			{
				return this._LevelId;
			}
			set
			{
				if ((this._LevelId != value))
				{
					this.OnLevelIdChanging(value);
					this.SendPropertyChanging();
					this._LevelId = value;
					this.SendPropertyChanged("LevelId");
					this.OnLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelName", DbType="Int")]
		public System.Nullable<int> LevelName
		{
			get
			{
				return this._LevelName;
			}
			set
			{
				if ((this._LevelName != value))
				{
					this.OnLevelNameChanging(value);
					this.SendPropertyChanging();
					this._LevelName = value;
					this.SendPropertyChanged("LevelName");
					this.OnLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelTable_CourseTable", Storage="_CourseTables", ThisKey="LevelId", OtherKey="LevelId")]
		public EntitySet<CourseTable> CourseTables
		{
			get
			{
				return this._CourseTables;
			}
			set
			{
				this._CourseTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelTable_StudentDetail", Storage="_StudentDetails", ThisKey="LevelId", OtherKey="LevelId")]
		public EntitySet<StudentDetail> StudentDetails
		{
			get
			{
				return this._StudentDetails;
			}
			set
			{
				this._StudentDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseTables(CourseTable entity)
		{
			this.SendPropertyChanging();
			entity.LevelTable = this;
		}
		
		private void detach_CourseTables(CourseTable entity)
		{
			this.SendPropertyChanging();
			entity.LevelTable = null;
		}
		
		private void attach_StudentDetails(StudentDetail entity)
		{
			this.SendPropertyChanging();
			entity.LevelTable = this;
		}
		
		private void detach_StudentDetails(StudentDetail entity)
		{
			this.SendPropertyChanging();
			entity.LevelTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SemesterTable")]
	public partial class SemesterTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SemesterId;
		
		private string _SemesterName;
		
		private EntitySet<CourseTable> _CourseTables;
		
		private EntitySet<StudentDetail> _StudentDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSemesterIdChanging(int value);
    partial void OnSemesterIdChanged();
    partial void OnSemesterNameChanging(string value);
    partial void OnSemesterNameChanged();
    #endregion
		
		public SemesterTable()
		{
			this._CourseTables = new EntitySet<CourseTable>(new Action<CourseTable>(this.attach_CourseTables), new Action<CourseTable>(this.detach_CourseTables));
			this._StudentDetails = new EntitySet<StudentDetail>(new Action<StudentDetail>(this.attach_StudentDetails), new Action<StudentDetail>(this.detach_StudentDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SemesterId
		{
			get
			{
				return this._SemesterId;
			}
			set
			{
				if ((this._SemesterId != value))
				{
					this.OnSemesterIdChanging(value);
					this.SendPropertyChanging();
					this._SemesterId = value;
					this.SendPropertyChanged("SemesterId");
					this.OnSemesterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterName", DbType="NVarChar(50)")]
		public string SemesterName
		{
			get
			{
				return this._SemesterName;
			}
			set
			{
				if ((this._SemesterName != value))
				{
					this.OnSemesterNameChanging(value);
					this.SendPropertyChanging();
					this._SemesterName = value;
					this.SendPropertyChanged("SemesterName");
					this.OnSemesterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterTable_CourseTable", Storage="_CourseTables", ThisKey="SemesterId", OtherKey="SemesterId")]
		public EntitySet<CourseTable> CourseTables
		{
			get
			{
				return this._CourseTables;
			}
			set
			{
				this._CourseTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterTable_StudentDetail", Storage="_StudentDetails", ThisKey="SemesterId", OtherKey="SemesterId")]
		public EntitySet<StudentDetail> StudentDetails
		{
			get
			{
				return this._StudentDetails;
			}
			set
			{
				this._StudentDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseTables(CourseTable entity)
		{
			this.SendPropertyChanging();
			entity.SemesterTable = this;
		}
		
		private void detach_CourseTables(CourseTable entity)
		{
			this.SendPropertyChanging();
			entity.SemesterTable = null;
		}
		
		private void attach_StudentDetails(StudentDetail entity)
		{
			this.SendPropertyChanging();
			entity.SemesterTable = this;
		}
		
		private void detach_StudentDetails(StudentDetail entity)
		{
			this.SendPropertyChanging();
			entity.SemesterTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentDetails")]
	public partial class StudentDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentId;
		
		private System.Nullable<int> _LevelId;
		
		private System.Nullable<int> _DeptId;
		
		private System.Nullable<int> _SemesterId;
		
		private EntitySet<_100LResultTable> @__100LResultTables;
		
		private EntityRef<DepartmentTable> _DepartmentTable;
		
		private EntityRef<LevelTable> _LevelTable;
		
		private EntityRef<SemesterTable> _SemesterTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnLevelIdChanging(System.Nullable<int> value);
    partial void OnLevelIdChanged();
    partial void OnDeptIdChanging(System.Nullable<int> value);
    partial void OnDeptIdChanged();
    partial void OnSemesterIdChanging(System.Nullable<int> value);
    partial void OnSemesterIdChanged();
    #endregion
		
		public StudentDetail()
		{
			this.@__100LResultTables = new EntitySet<_100LResultTable>(new Action<_100LResultTable>(this.attach__100LResultTables), new Action<_100LResultTable>(this.detach__100LResultTables));
			this._DepartmentTable = default(EntityRef<DepartmentTable>);
			this._LevelTable = default(EntityRef<LevelTable>);
			this._SemesterTable = default(EntityRef<SemesterTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelId", DbType="Int")]
		public System.Nullable<int> LevelId
		{
			get
			{
				return this._LevelId;
			}
			set
			{
				if ((this._LevelId != value))
				{
					if (this._LevelTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIdChanging(value);
					this.SendPropertyChanging();
					this._LevelId = value;
					this.SendPropertyChanged("LevelId");
					this.OnLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptId", DbType="Int")]
		public System.Nullable<int> DeptId
		{
			get
			{
				return this._DeptId;
			}
			set
			{
				if ((this._DeptId != value))
				{
					if (this._DepartmentTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeptIdChanging(value);
					this.SendPropertyChanging();
					this._DeptId = value;
					this.SendPropertyChanged("DeptId");
					this.OnDeptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterId", DbType="Int")]
		public System.Nullable<int> SemesterId
		{
			get
			{
				return this._SemesterId;
			}
			set
			{
				if ((this._SemesterId != value))
				{
					if (this._SemesterTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterIdChanging(value);
					this.SendPropertyChanging();
					this._SemesterId = value;
					this.SendPropertyChanged("SemesterId");
					this.OnSemesterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentDetail__100LResultTable", Storage="__100LResultTables", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<_100LResultTable> _100LResultTables
		{
			get
			{
				return this.@__100LResultTables;
			}
			set
			{
				this.@__100LResultTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentTable_StudentDetail", Storage="_DepartmentTable", ThisKey="DeptId", OtherKey="DeptId", IsForeignKey=true, DeleteRule="CASCADE")]
		public DepartmentTable DepartmentTable
		{
			get
			{
				return this._DepartmentTable.Entity;
			}
			set
			{
				DepartmentTable previousValue = this._DepartmentTable.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentTable.Entity = null;
						previousValue.StudentDetails.Remove(this);
					}
					this._DepartmentTable.Entity = value;
					if ((value != null))
					{
						value.StudentDetails.Add(this);
						this._DeptId = value.DeptId;
					}
					else
					{
						this._DeptId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DepartmentTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelTable_StudentDetail", Storage="_LevelTable", ThisKey="LevelId", OtherKey="LevelId", IsForeignKey=true, DeleteRule="CASCADE")]
		public LevelTable LevelTable
		{
			get
			{
				return this._LevelTable.Entity;
			}
			set
			{
				LevelTable previousValue = this._LevelTable.Entity;
				if (((previousValue != value) 
							|| (this._LevelTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelTable.Entity = null;
						previousValue.StudentDetails.Remove(this);
					}
					this._LevelTable.Entity = value;
					if ((value != null))
					{
						value.StudentDetails.Add(this);
						this._LevelId = value.LevelId;
					}
					else
					{
						this._LevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterTable_StudentDetail", Storage="_SemesterTable", ThisKey="SemesterId", OtherKey="SemesterId", IsForeignKey=true, DeleteRule="CASCADE")]
		public SemesterTable SemesterTable
		{
			get
			{
				return this._SemesterTable.Entity;
			}
			set
			{
				SemesterTable previousValue = this._SemesterTable.Entity;
				if (((previousValue != value) 
							|| (this._SemesterTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SemesterTable.Entity = null;
						previousValue.StudentDetails.Remove(this);
					}
					this._SemesterTable.Entity = value;
					if ((value != null))
					{
						value.StudentDetails.Add(this);
						this._SemesterId = value.SemesterId;
					}
					else
					{
						this._SemesterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SemesterTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__100LResultTables(_100LResultTable entity)
		{
			this.SendPropertyChanging();
			entity.StudentDetail = this;
		}
		
		private void detach__100LResultTables(_100LResultTable entity)
		{
			this.SendPropertyChanging();
			entity.StudentDetail = null;
		}
	}
}
#pragma warning restore 1591
